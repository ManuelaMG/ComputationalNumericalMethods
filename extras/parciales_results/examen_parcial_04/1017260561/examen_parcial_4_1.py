# -*- coding: utf-8 -*-
"""examen_parcial_4_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14efIiSD9LlBwbCRR_vxUkPFaZ9QooJLb

##Manuela Montoya Gonzalez

# Examen parcial 4  $\color{red}{\text{(10p max)}}$ (Equaciones diferenciales)
* Antes de enviar el archivo, $\textbf{reiniciar y ejecutar el kernel}$ y ver que el archivo se compila sin errores
* enviar el archivo jupyter sin anexos antes de las 10.20am del 30.09.2022 a mi dirección de correo electrónico: michal.hemmerling@udea.edu.co

## Ejercicio 1. $\color{red}{\text{(3p)}}$ Equaciones diferenciales - problema de valor de limite (boundary value problem).

Transporte de calor en un objeto puede ser escrito usando segunda orden equacion diferencial:
$$\frac{d^2T}{dx^2}=0.01T-0.2$$
a) Usando `scipy.integrate.solve_bvp` resolver este equacion diferencial cumpliendo siguientes condiciones de limite:

T(x=0)=40  
T(x=10)=200

b) Hace grafico de T(x) vs x (con etiquietas y legend)
"""

from scipy.integrate import solve_bvp
import numpy as np
import matplotlib.pyplot as plt

#Condiciones iniciales
tinii = 40
tfinn = 200
xinii = 0
xfinn = 10

#Definimos la funcion
def fun(x, y):
  return np.vstack((y[1], np.full_like(x, 0.01*y[1] - 0.2)))

def fun1(yini,yfin):
  return np.array([yini[0] - tinii,yfin[0] - tfinn])

x01 = np.linspace(xinii,xfinn,101)
y01 = np.zeros((2,x01.size))

solu = solve_bvp(fun,fun1,x01,y01)

print(type(solu))
print(solu.x)
print(solu.y[0])
print(solu.y[1])
if solu.success == True:
  print('excelente,la integracion termino con exito')

#punto b) plot x vs t
#Graficamos
fig,ax = plt.subplots(1,1)
print(solu.message)
ax.plot(solu.x,solu.y[0],'--m',label = 'scipy.integrate.solve_ivp')
ax.plot(solu.x,solu.y[1],'--b',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('T')
ax.set_ylabel('x')
ax.legend()

"""## Ejercicio 2.  $\color{red}{\text{(4p)}}$ Ecuaciones diferenciales - problema de valor inicial (initial value problem).

La ley de Newton del enfriamiento tiene forma de ecuación diferencial

$$\frac{dy}{dt}=k(y-T_{amb}) $$


donde:
* y es la temperatura actual de un objeto
* t es tiempo
* k es un valor constante de enfriamiento
* $T_{amb}$ es la temperatura del ambiente

Digamos que una taza de café tiene una temperatura inicial de 90 centígrados y la temperatura ambiente es de 25 centígrados.

a) usando `scipy.integrate.solve_ivp` resolver ecuación diferencial:

* para el rango t: t=[0:60], [minutos] (use 100 puntos)
* asumir k=-0.06

b) Hace grafico de $y(t)$ vs $t$ (con leyenda)
* si le gusta tomar café cuando está a más de 70 grados, ¿cuál es el tiempo máximo que puede esperar antes de beber el café (puede obtener índices usando `np.argwhere` para obtener un rango de temperatura más preciso)
"""

#Punto a)
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
import numpy as np

#creamos nuestra funcion
def newton(t,y):
  return k*(y - T)

#Definimos nuestras condiciones iniciales
t_span = (0.0,60.0)
y0 = [90.0]
k = -0.06
T = 25.0

#solucionamos 
sol = solve_ivp(newton,t_span,y0)
print(type(sol))
print(sol.t)
print(sol.y[0])
if sol.success == True:
  print('excelente,la integracion termino con exito')

#Punto b)
#Graficamos
fig,ax = plt.subplots(1,1)
print(sol.message)
ax.plot(sol.t,sol.y[0],'--m',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('t')
ax.set_ylabel('y')
ax.legend()

"""## Ejercicio 3.  $\color{red}{\text{(3p)}}$ Equaciones diferenciales - problema de valor de limite (boundary value problem).

Los organizadores de un espectáculo de fuegos artificiales quieren que los fuegos exploten a 40 metros sobre el suelo 5 segundos después del lanzamiento. Encuentra la velocidad inicial del cohete. 

a) usar ecuacion diferencial segunda orden:

$$\frac{d^2y}{dt^2}= −g $$

donde $y$ es altitud de cohete y,   

b) hacer plot $y(t)$ vs $t$

"""

from scipy.integrate import solve_bvp
import numpy as np
import matplotlib.pyplot as plt

#partimos de un sistema en reposo así que y(0) = 0, y nuestro otro yo es y(5) = 40 dado por el problema
def derivs(t,y):
    dydt=np.zeros((y.shape))
    dydt[0]=y[0]
    dydt[1]=-9.81
    return dydt

#decimos que ya y yb comienzan en 0
def bc(ya,yb):
    residuals=np.array([0.0,0.0])
    residuals[0]=ya[0] - 0.0
    residuals[1]=yb[0] - 40.0
    print(ya[1])
    return residuals

#valor de nuestro intervalo para el eje x [0,5]
t_steps = 100
t = np.linspace(0,5,t_steps)
y = np.zeros((2,t_steps))
y = np.ones((2,t_steps))
print(y.shape)
sol = solve_bvp(derivs, bc, t, y)

#Graficamos
fig, ax=plt.subplots(1,1)
ax.plot(sol.x, sol.y[0],'-r',label=' y vs t')
ax.plot(5,40,'.b')
ax.set_xlabel('t')
ax.set_ylabel('y(t)')
ax.legend()
print(-5/4)
print(sol.y[0][-1])

"""## Ejercicio 4 Ecuaciones diferenciales acopladas - problema de valor inicial `scipy.integrate.solve_ivp` $\color{red}{\text{(10p)}}$ o `otros metodos`  $\color{red}{\text{(7p)}}$

Las ecuaciones de Lotka-Volterra, también conocidas como ecuaciones depredador-presa, son un par de ecuaciones de primer orden, no lineales, ecuaciones diferenciales utilizadas con frecuencia para describir la dinámica de los sistemas biológicos en los que interactúan dos especies, uno como depredador y el otro como presa. Las poblaciones cambian a través del tiempo de acuerdo con el par de ecuaciones.

$$\frac{dx}{dt}=x(\color{red}{\alpha}-\color{red}{\beta} y)$$
$$\frac{dy}{dt}=-y(\color{red}{\gamma}-\color{red}{\delta} x)$$

Esa ecuación describiría la evolución de la población de conejos y zorros (condiciones perfectas)

* x - numbero de conejos  
* y - numbero de zorros

* $\color{red}{\alpha, \beta, \gamma, \delta }$ son parámetros que describen la interacción de las dos especies

* $\frac{dx}{dt}, \frac{dy}{dt}$ representan las tasas de crecimiento de las dos poblaciones a lo largo del tiempo

* $t$ es tiempo

![](https://raw.githubusercontent.com/mhemmg/ComputationalNumericalMethods/master/extras/additional_materials/examen_parcial_IV/rabbits_foxes.png)

a) solucionar los ecuaciones diferenciales usando `scipy.integrate.solve_ivp` o `scipy.integrate.odeint`
asumir: 
* $\alpha, \beta, \gamma, \delta = 1$
* $x_{ini}=4$
* $y_{ini}=2$
* $t=0:30$ (unidades arbitrarias, asumir meses)

b) hacer plot $x$ vs. $t$ , $y$ vs. $t$   
c) hacer plot $x vs y$  
d) comentar sobre los dos plots
"""

import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

#Escribimos la funcion
#creamos un vector dydx que contenga x,y
def depredadorpresa(t,y):
    dydx = np.array([0.0,
                     0.0])
    
    dydx[0] = y[0]*(a - B*y[1])
    dydx[1] = -y[1]*(r - d*y[0])
    return dydx

#Tenemos en cuenta las condiciones iniciales y x0 = 4, y0 = 2 contenidos en un nuevo y0
a = 1.0
B = 1.0
r = 1.0
d = 1.0

t0 = 0.0
y0 = np.array([4.0,
               2.0])

#t0 = 0.0 y tfinal = 30 dados por el problema
t_span=(t0,30.0)

#usamos solve_ivp
soli = solve_ivp(depredadorpresa, t_span, y0)
print(type(soli))
print(soli.t)
print(soli.y[0])
if soli.success == True:
  print('excelente,la integracion termino con exito')

#punto b) plot x vs t
#Graficamos
fig,ax = plt.subplots(1,1)
print(soli.message)
ax.plot(soli.t,soli.y[0],'--m',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('t')
ax.set_ylabel('x')
ax.legend()

#punto b) plot y vs t
#Graficamos
fig,ax = plt.subplots(1,1)
print(soli.message)
ax.plot(soli.t,soli.y[1],'--b',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('t')
ax.set_ylabel('y')
ax.legend()

fig,ax = plt.subplots(1,1)
ax.plot(soli.t,soli.y[0],'--m',label = 'scipy.integrate.solve_ivp')
ax.plot(soli.t,soli.y[1],'--b',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('Tiempo')
ax.set_ylabel('magenta poblacion conejos, azul poblacion zorros')
ax.legend()

"""pundo d)

Notamos que cuando la población de zorros es máxima, la población de conejos alcanza su mínimo. Y cuando la población de conejos es máxima la de zorros es mínima.

Son Inversamente Proporcionales.
"""

#punto c) plot x vs y
#Graficamos
fig,ax = plt.subplots(1,1)
print(soli.message)
ax.plot(soli.y[0],soli.y[1],'.k',label = 'scipy.integrate.solve_ivp')
ax.set_xlabel('y')
ax.set_ylabel('x')
ax.legend()

"""la grafica de conejos vs zorros tiene un comportamiento ciclico, ambas especies dependen una de la otra. """